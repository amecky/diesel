#pragma once
//#define DBG_TXT_IMPLEMENTATION

namespace ds {

	namespace dbg {

		void init();

		void begin();

		void add(int x, int y, const char* message);

		void format(int x, int y, char* format, ...);

		void flush();

		void shutdown();

	}
}

#ifdef DBG_TXT_IMPLEMENTATION

#include "..\diesel.h"
#include <stdint.h>

typedef uint8_t BYTE;

namespace ds {

	namespace dbg {

		// -----------------------------------------------------
		// Monochrome font - Fixedsys size 20
		// -----------------------------------------------------
		const unsigned char font[128][16] = {
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x60, 0x60, 0x06, 0x1B, 0x3C, 0x6C, 0xC0, 0x01, 0x06, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0xF0, 0x60, 0x06, 0x1B, 0x66, 0x6C, 0x61, 0x03, 0x06, 0x18, 0x60, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0xF0, 0x60, 0x86, 0x3F, 0x06, 0xB8, 0x61, 0x03, 0x06, 0x18, 0x60, 0xC0, 0x06, 0x06, 0x00 },
			{ 0x00, 0xF0, 0x00, 0x00, 0x1B, 0x0C, 0xC0, 0xC0, 0x01, 0x00, 0x0C, 0xC0, 0x80, 0x03, 0x06, 0x00 },
			{ 0x00, 0x60, 0x00, 0x00, 0x1B, 0x18, 0x60, 0x60, 0x00, 0x00, 0x0C, 0xC0, 0xE0, 0x8F, 0x1F, 0x00 },
			{ 0x00, 0x60, 0x00, 0x00, 0x1B, 0x30, 0x30, 0x60, 0x0F, 0x00, 0x0C, 0xC0, 0x80, 0x03, 0x06, 0x00 },
			{ 0x00, 0x00, 0x00, 0x80, 0x3F, 0x60, 0xD8, 0x61, 0x06, 0x00, 0x0C, 0xC0, 0xC0, 0x06, 0x06, 0x00 },
			{ 0x00, 0x60, 0x00, 0x00, 0x1B, 0x66, 0x68, 0x63, 0x06, 0x00, 0x0C, 0xC0, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x60, 0x00, 0x00, 0x1B, 0x3C, 0x60, 0xC3, 0x0D, 0x00, 0x18, 0x60, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xC0, 0x01, 0x00, 0x00, 0x18, 0x60, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x18, 0x78, 0xC0, 0xC0, 0x03, 0x0F, 0x0C, 0xF8, 0x81, 0x83, 0x1F, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x18, 0xCC, 0xE0, 0x60, 0x86, 0x19, 0x0C, 0x18, 0x80, 0x01, 0x18, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x0C, 0xEC, 0xF8, 0x60, 0x86, 0x19, 0x6C, 0x18, 0xC0, 0x00, 0x0C, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x0C, 0xEC, 0xC0, 0x00, 0x06, 0x18, 0x6C, 0x18, 0xE0, 0x03, 0x0C, 0x00 },
			{ 0x00, 0xF8, 0x01, 0x00, 0x06, 0xCC, 0xC0, 0x00, 0x03, 0x0E, 0x6C, 0xF8, 0x60, 0x06, 0x06, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x06, 0xDC, 0xC0, 0x80, 0x01, 0x18, 0x66, 0x80, 0x61, 0x06, 0x06, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x03, 0xDC, 0xC0, 0xC0, 0x80, 0x19, 0xFE, 0x80, 0x61, 0x06, 0x03, 0x00 },
			{ 0x38, 0x00, 0x80, 0x03, 0x03, 0xCC, 0xC0, 0x60, 0x80, 0x19, 0x60, 0xC0, 0x60, 0x06, 0x03, 0x00 },
			{ 0x38, 0x00, 0x80, 0x83, 0x01, 0x78, 0xC0, 0xE0, 0x07, 0x0F, 0x60, 0x78, 0xC0, 0x03, 0x03, 0x00 },
			{ 0x30, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x3C, 0xF0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x0F, 0x7E, 0x60, 0xE0, 0x03, 0x0F, 0x00 },
			{ 0x66, 0x98, 0x01, 0x00, 0x00, 0x30, 0x00, 0xC0, 0x80, 0x19, 0xC3, 0xF0, 0x60, 0x86, 0x19, 0x00 },
			{ 0x66, 0x98, 0x81, 0x03, 0x0E, 0x18, 0x00, 0x80, 0x81, 0x19, 0xC3, 0x98, 0x61, 0x86, 0x19, 0x00 },
			{ 0x6E, 0x98, 0x81, 0x03, 0x0E, 0x0C, 0xF8, 0x01, 0x03, 0x0C, 0xF3, 0x98, 0x61, 0x86, 0x01, 0x00 },
			{ 0x3C, 0x98, 0x01, 0x00, 0x00, 0x06, 0x00, 0x00, 0x06, 0x06, 0xDB, 0x98, 0xE1, 0x83, 0x01, 0x00 },
			{ 0x76, 0xF0, 0x01, 0x00, 0x00, 0x0C, 0xF8, 0x01, 0x03, 0x06, 0xDB, 0xF8, 0x61, 0x86, 0x01, 0x00 },
			{ 0x66, 0xC0, 0x00, 0x00, 0x00, 0x18, 0x00, 0x80, 0x01, 0x00, 0xF3, 0x98, 0x61, 0x86, 0x19, 0x00 },
			{ 0x66, 0x60, 0x80, 0x03, 0x0E, 0x30, 0x00, 0xC0, 0x00, 0x06, 0x03, 0x98, 0x61, 0x86, 0x19, 0x00 },
			{ 0x3C, 0x70, 0x80, 0x03, 0x0E, 0x60, 0x00, 0x60, 0x00, 0x06, 0xFE, 0x98, 0xE1, 0x03, 0x0F, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x1E, 0xF8, 0xE1, 0x07, 0x0F, 0x66, 0xF0, 0x00, 0x86, 0x19, 0x06, 0x18, 0x63, 0x0C, 0x0F, 0x00 },
			{ 0x36, 0x18, 0x60, 0x80, 0x19, 0x66, 0x60, 0x00, 0x86, 0x19, 0x06, 0x18, 0x63, 0x8C, 0x19, 0x00 },
			{ 0x66, 0x18, 0x60, 0x80, 0x19, 0x66, 0x60, 0x00, 0x86, 0x0D, 0x06, 0xB8, 0xE3, 0x8C, 0x19, 0x00 },
			{ 0x66, 0x18, 0x60, 0x80, 0x01, 0x66, 0x60, 0x00, 0x86, 0x0D, 0x06, 0x58, 0xE3, 0x8D, 0x19, 0x00 },
			{ 0x66, 0xF8, 0xE0, 0x83, 0x01, 0x7E, 0x60, 0x00, 0x86, 0x07, 0x06, 0x58, 0x63, 0x8F, 0x19, 0x00 },
			{ 0x66, 0x18, 0x60, 0x80, 0x1D, 0x66, 0x60, 0x00, 0x86, 0x0D, 0x06, 0x58, 0x63, 0x8E, 0x19, 0x00 },
			{ 0x66, 0x18, 0x60, 0x80, 0x19, 0x66, 0x60, 0x60, 0x86, 0x0D, 0x06, 0x18, 0x63, 0x8C, 0x19, 0x00 },
			{ 0x36, 0x18, 0x60, 0x80, 0x19, 0x66, 0x60, 0x60, 0x86, 0x19, 0x06, 0x18, 0x63, 0x8C, 0x19, 0x00 },
			{ 0x1E, 0xF8, 0x61, 0x00, 0x1F, 0x66, 0xF0, 0xC0, 0x83, 0x19, 0x7E, 0x18, 0x63, 0x0C, 0x0F, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x3E, 0xF0, 0xE0, 0x03, 0x0F, 0x7E, 0x98, 0x61, 0x86, 0x31, 0x66, 0x98, 0xE1, 0x07, 0x0F, 0x00 },
			{ 0x66, 0x98, 0x61, 0x86, 0x19, 0x18, 0x98, 0x61, 0x86, 0x31, 0x66, 0x98, 0x01, 0x06, 0x03, 0x00 },
			{ 0x66, 0x98, 0x61, 0x86, 0x01, 0x18, 0x98, 0x61, 0x86, 0x31, 0x2C, 0x98, 0x01, 0x06, 0x03, 0x00 },
			{ 0x66, 0x98, 0x61, 0x06, 0x03, 0x18, 0x98, 0x61, 0x86, 0x35, 0x18, 0x98, 0x01, 0x03, 0x03, 0x00 },
			{ 0x3E, 0x98, 0xE1, 0x03, 0x06, 0x18, 0x98, 0x61, 0x86, 0x35, 0x18, 0xF0, 0x80, 0x01, 0x03, 0x00 },
			{ 0x06, 0x98, 0x61, 0x03, 0x0C, 0x18, 0x98, 0x61, 0x86, 0x35, 0x34, 0x60, 0xC0, 0x00, 0x03, 0x00 },
			{ 0x06, 0x98, 0x61, 0x06, 0x18, 0x18, 0x98, 0x61, 0x06, 0x1B, 0x66, 0x60, 0x60, 0x00, 0x03, 0x00 },
			{ 0x06, 0x98, 0x61, 0x86, 0x19, 0x18, 0x98, 0xC1, 0x03, 0x1B, 0x66, 0x60, 0x60, 0x00, 0x03, 0x00 },
			{ 0x06, 0xF0, 0x60, 0x06, 0x0F, 0x18, 0xF0, 0x80, 0x01, 0x1B, 0x66, 0x60, 0xE0, 0x07, 0x03, 0x00 },
			{ 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00 },
			{ 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x80, 0x01, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0xC0, 0x03, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x06, 0xF0, 0x60, 0x06, 0x00, 0x30, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x80, 0x07, 0x00, 0x00 },
			{ 0x06, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0xC0, 0x00, 0x00, 0x00 },
			{ 0x0C, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xE0, 0x03, 0x0F, 0x7C, 0xF0, 0xC0, 0x00, 0x1F, 0x00 },
			{ 0x0C, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x80, 0x61, 0x86, 0x19, 0x66, 0x98, 0xC1, 0x80, 0x19, 0x00 },
			{ 0x18, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x80, 0x61, 0x86, 0x01, 0x66, 0x98, 0xE1, 0x87, 0x19, 0x00 },
			{ 0x18, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x61, 0x86, 0x01, 0x66, 0xF8, 0xC1, 0x80, 0x19, 0x00 },
			{ 0x30, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x98, 0x61, 0x86, 0x01, 0x66, 0x18, 0xC0, 0x80, 0x19, 0x00 },
			{ 0x30, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x98, 0x61, 0x86, 0x19, 0x66, 0x18, 0xC0, 0x80, 0x19, 0x00 },
			{ 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xE1, 0x03, 0x0F, 0x7C, 0xF0, 0xC0, 0x00, 0x1F, 0x00 },
			{ 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00 },
			{ 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00 },
			{ 0x00, 0xF0, 0x00, 0xC0, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0F, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x60, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x06, 0x60, 0x00, 0x83, 0x01, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x06, 0x00, 0x00, 0x80, 0x01, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x3E, 0x78, 0xC0, 0x83, 0x19, 0x18, 0xF8, 0xE1, 0x03, 0x0F, 0x3E, 0xF0, 0x61, 0x06, 0x1F, 0x00 },
			{ 0x66, 0x60, 0x00, 0x83, 0x19, 0x18, 0x58, 0x63, 0x86, 0x19, 0x66, 0x98, 0x61, 0x87, 0x01, 0x00 },
			{ 0x66, 0x60, 0x00, 0x83, 0x0D, 0x18, 0x58, 0x63, 0x86, 0x19, 0x66, 0x98, 0xE1, 0x80, 0x01, 0x00 },
			{ 0x66, 0x60, 0x00, 0x83, 0x07, 0x18, 0x58, 0x63, 0x86, 0x19, 0x66, 0x98, 0x61, 0x00, 0x0F, 0x00 },
			{ 0x66, 0x60, 0x00, 0x83, 0x0D, 0x18, 0x58, 0x63, 0x86, 0x19, 0x66, 0x98, 0x61, 0x00, 0x18, 0x00 },
			{ 0x66, 0x60, 0x00, 0x83, 0x19, 0x18, 0x58, 0x63, 0x86, 0x19, 0x66, 0x98, 0x61, 0x00, 0x18, 0x00 },
			{ 0x66, 0xF8, 0x01, 0x83, 0x19, 0x7E, 0x18, 0x63, 0x06, 0x0F, 0x3E, 0xF0, 0x61, 0x80, 0x0F, 0x00 },
			{ 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x80, 0x01, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x80, 0x01, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0xE0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x80, 0x01, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x18, 0x30, 0xE0, 0x88, 0x1F, 0x00 },
			{ 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x18, 0x60, 0xB0, 0x8D, 0x1F, 0x00 },
			{ 0x7E, 0x98, 0x61, 0x86, 0x31, 0x66, 0x98, 0xE1, 0x07, 0x06, 0x18, 0x60, 0x10, 0x87, 0x1F, 0x00 },
			{ 0x0C, 0x98, 0x61, 0x86, 0x35, 0x66, 0x98, 0x01, 0x06, 0x06, 0x18, 0x60, 0x00, 0x80, 0x1F, 0x00 },
			{ 0x0C, 0x98, 0x61, 0x86, 0x35, 0x3C, 0x98, 0x01, 0x03, 0x03, 0x18, 0xC0, 0x00, 0x80, 0x1F, 0x00 },
			{ 0x0C, 0x98, 0x61, 0x86, 0x35, 0x18, 0x98, 0x81, 0x81, 0x01, 0x18, 0x80, 0x01, 0x80, 0x1F, 0x00 },
			{ 0x0C, 0x98, 0x61, 0x86, 0x35, 0x3C, 0x98, 0xC1, 0x00, 0x03, 0x18, 0xC0, 0x00, 0x80, 0x1F, 0x00 },
			{ 0x0C, 0x98, 0xC1, 0x03, 0x1B, 0x66, 0x98, 0x61, 0x00, 0x06, 0x18, 0x60, 0x00, 0x80, 0x1F, 0x00 },
			{ 0x78, 0xF0, 0x81, 0x01, 0x1B, 0x66, 0xF0, 0xE0, 0x07, 0x06, 0x18, 0x60, 0x00, 0x80, 0x1F, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x06, 0x18, 0x60, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x0C, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
			{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
		};

		// -----------------------------------------------------
		// gemoetry shader
		// -----------------------------------------------------
		const BYTE DebugText_GS_Main[] =
		{
			68,  88,  66,  67, 202,  42,
			118, 107, 229,  53, 147, 185,
			2, 218, 254, 203, 198, 198,
			202, 235,   1,   0,   0,   0,
			92,   6,   0,   0,   3,   0,
			0,   0,  44,   0,   0,   0,
			152,   0,   0,   0,  12,   1,
			0,   0,  73,  83,  71,  78,
			100,   0,   0,   0,   3,   0,
			0,   0,   8,   0,   0,   0,
			80,   0,   0,   0,   0,   0,
			0,   0,   1,   0,   0,   0,
			3,   0,   0,   0,   0,   0,
			0,   0,  15,   3,   0,   0,
			92,   0,   0,   0,   0,   0,
			0,   0,   0,   0,   0,   0,
			3,   0,   0,   0,   1,   0,
			0,   0,  15,  15,   0,   0,
			92,   0,   0,   0,   1,   0,
			0,   0,   0,   0,   0,   0,
			3,   0,   0,   0,   2,   0,
			0,   0,  15,  15,   0,   0,
			83,  86,  95,  80,  79,  83,
			73,  84,  73,  79,  78,   0,
			67,  79,  76,  79,  82,   0,
			171, 171,  79,  83,  71,  78,
			108,   0,   0,   0,   3,   0,
			0,   0,   8,   0,   0,   0,
			80,   0,   0,   0,   0,   0,
			0,   0,   1,   0,   0,   0,
			3,   0,   0,   0,   0,   0,
			0,   0,  15,   0,   0,   0,
			92,   0,   0,   0,   0,   0,
			0,   0,   0,   0,   0,   0,
			3,   0,   0,   0,   1,   0,
			0,   0,   3,  12,   0,   0,
			101,   0,   0,   0,   0,   0,
			0,   0,   0,   0,   0,   0,
			3,   0,   0,   0,   2,   0,
			0,   0,  15,   0,   0,   0,
			83,  86,  95,  80,  79,  83,
			73,  84,  73,  79,  78,   0,
			84,  69,  88,  67,  79,  79,
			82,  68,   0,  67,  79,  76,
			79,  82,   0, 171,  83,  72,
			68,  82,  72,   5,   0,   0,
			64,   0,   2,   0,  82,   1,
			0,   0,  89,   0,   0,   4,
			70, 142,  32,   0,   0,   0,
			0,   0,   5,   0,   0,   0,
			97,   0,   0,   5, 242,  16,
			32,   0,   1,   0,   0,   0,
			0,   0,   0,   0,   1,   0,
			0,   0,  95,   0,   0,   4,
			242,  16,  32,   0,   1,   0,
			0,   0,   1,   0,   0,   0,
			95,   0,   0,   4, 242,  16,
			32,   0,   1,   0,   0,   0,
			2,   0,   0,   0, 104,   0,
			0,   2,   3,   0,   0,   0,
			93,   8,   0,   1,  92,  40,
			0,   1, 103,   0,   0,   4,
			242,  32,  16,   0,   0,   0,
			0,   0,   1,   0,   0,   0,
			101,   0,   0,   3,  50,  32,
			16,   0,   1,   0,   0,   0,
			101,   0,   0,   3, 242,  32,
			16,   0,   2,   0,   0,   0,
			94,   0,   0,   2,   4,   0,
			0,   0,   9,   0,   0,   1,
			50,   0,   0,  15, 242,   0,
			16,   0,   0,   0,   0,   0,
			70, 132,  32, 128,  65,   0,
			0,   0,   0,   0,   0,   0,
			0,   0,   0,   0,   2,  64,
			0,   0,   0,   0,   0,  63,
			0,   0,   0,  63,   0,   0,
			0,  63,   0,   0,   0,  63,
			70,  20,  32,   0,   0,   0,
			0,   0,   0,   0,   0,   0,
			50,   0,   0,  13, 242,   0,
			16,   0,   0,   0,   0,   0,
			230,  30,  32,   0,   0,   0,
			0,   0,   1,   0,   0,   0,
			2,  64,   0,   0,   0,   0,
			0,  63,   0,   0,   0,  63,
			0,   0,   0, 191,   0,   0,
			0, 191, 102,  12,  16,   0,
			0,   0,   0,   0,  54,   0,
			0,   5, 178,   0,  16,   0,
			1,   0,   0,   0, 102,  14,
			16,   0,   0,   0,   0,   0,
			54,   0,   0,   5,  66,   0,
			16,   0,   1,   0,   0,   0,
			1,  64,   0,   0,   0,   0,
			128,  63,  17,   0,   0,   8,
			18,   0,  16,   0,   2,   0,
			0,   0,  70,  10,  16,   0,
			1,   0,   0,   0,  70, 142,
			32,   0,   0,   0,   0,   0,
			1,   0,   0,   0,  54,   0,
			0,   5,  18,  32,  16,   0,
			0,   0,   0,   0,  10,   0,
			16,   0,   2,   0,   0,   0,
			17,   0,   0,   8,  18,   0,
			16,   0,   2,   0,   0,   0,
			70,  10,  16,   0,   1,   0,
			0,   0,  70, 142,  32,   0,
			0,   0,   0,   0,   2,   0,
			0,   0,  54,   0,   0,   5,
			34,  32,  16,   0,   0,   0,
			0,   0,  10,   0,  16,   0,
			2,   0,   0,   0,  54,   0,
			0,   5,  66,  32,  16,   0,
			0,   0,   0,   0,   1,  64,
			0,   0,   0,   0, 128,  63,
			17,   0,   0,   8,  34,   0,
			16,   0,   1,   0,   0,   0,
			70,  10,  16,   0,   1,   0,
			0,   0,  70, 142,  32,   0,
			0,   0,   0,   0,   4,   0,
			0,   0,  54,   0,   0,   5,
			130,  32,  16,   0,   0,   0,
			0,   0,  26,   0,  16,   0,
			1,   0,   0,   0,  56,   0,
			0,  11, 242,   0,  16,   0,
			2,   0,   0,   0,   2,  64,
			0,   0,   0,   0,   0,  60,
			0,   0,   0,  60,   0,   0,
			0,  60,   0,   0,   0,  60,
			70,  30,  32,   0,   0,   0,
			0,   0,   1,   0,   0,   0,
			54,   0,   0,   5,  50,  32,
			16,   0,   1,   0,   0,   0,
			70,   0,  16,   0,   2,   0,
			0,   0,  54,   0,   0,   6,
			242,  32,  16,   0,   2,   0,
			0,   0,  70,  30,  32,   0,
			0,   0,   0,   0,   2,   0,
			0,   0,  19,   0,   0,   1,
			54,   0,   0,   5,  66,   0,
			16,   0,   0,   0,   0,   0,
			1,  64,   0,   0,   0,   0,
			128,  63,  17,   0,   0,   8,
			34,   0,  16,   0,   1,   0,
			0,   0,  70,  10,  16,   0,
			0,   0,   0,   0,  70, 142,
			32,   0,   0,   0,   0,   0,
			1,   0,   0,   0,  54,   0,
			0,   5,  18,  32,  16,   0,
			0,   0,   0,   0,  26,   0,
			16,   0,   1,   0,   0,   0,
			17,   0,   0,   8,  34,   0,
			16,   0,   1,   0,   0,   0,
			70,  10,  16,   0,   0,   0,
			0,   0,  70, 142,  32,   0,
			0,   0,   0,   0,   2,   0,
			0,   0,  54,   0,   0,   5,
			34,  32,  16,   0,   0,   0,
			0,   0,  26,   0,  16,   0,
			1,   0,   0,   0,  54,   0,
			0,   5,  66,  32,  16,   0,
			0,   0,   0,   0,   1,  64,
			0,   0,   0,   0, 128,  63,
			17,   0,   0,   8,  34,   0,
			16,   0,   0,   0,   0,   0,
			70,  10,  16,   0,   0,   0,
			0,   0,  70, 142,  32,   0,
			0,   0,   0,   0,   4,   0,
			0,   0,  54,   0,   0,   5,
			130,  32,  16,   0,   0,   0,
			0,   0,  26,   0,  16,   0,
			0,   0,   0,   0,   0,   0,
			0,   7, 194,   0,  16,   0,
			2,   0,   0,   0, 166,  14,
			16,   0,   2,   0,   0,   0,
			6,   4,  16,   0,   2,   0,
			0,   0,  54,   0,   0,   5,
			18,  32,  16,   0,   1,   0,
			0,   0,  42,   0,  16,   0,
			2,   0,   0,   0,  54,   0,
			0,   5,  34,  32,  16,   0,
			1,   0,   0,   0,  26,   0,
			16,   0,   2,   0,   0,   0,
			54,   0,   0,   6, 242,  32,
			16,   0,   2,   0,   0,   0,
			70,  30,  32,   0,   0,   0,
			0,   0,   2,   0,   0,   0,
			19,   0,   0,   1,  17,   0,
			0,   8,  34,   0,  16,   0,
			0,   0,   0,   0, 198,  10,
			16,   0,   1,   0,   0,   0,
			70, 142,  32,   0,   0,   0,
			0,   0,   1,   0,   0,   0,
			54,   0,   0,   5,  18,  32,
			16,   0,   0,   0,   0,   0,
			26,   0,  16,   0,   0,   0,
			0,   0,  17,   0,   0,   8,
			34,   0,  16,   0,   0,   0,
			0,   0, 198,  10,  16,   0,
			1,   0,   0,   0,  70, 142,
			32,   0,   0,   0,   0,   0,
			2,   0,   0,   0,  17,   0,
			0,   8,  18,   0,  16,   0,
			1,   0,   0,   0, 198,  10,
			16,   0,   1,   0,   0,   0,
			70, 142,  32,   0,   0,   0,
			0,   0,   4,   0,   0,   0,
			54,   0,   0,   5, 130,   0,
			16,   0,   0,   0,   0,   0,
			58,   0,  16,   0,   1,   0,
			0,   0,  54,   0,   0,   5,
			34,  32,  16,   0,   0,   0,
			0,   0,  26,   0,  16,   0,
			0,   0,   0,   0,  54,   0,
			0,   5,  66,  32,  16,   0,
			0,   0,   0,   0,   1,  64,
			0,   0,   0,   0, 128,  63,
			54,   0,   0,   5, 130,  32,
			16,   0,   0,   0,   0,   0,
			10,   0,  16,   0,   1,   0,
			0,   0,  54,   0,   0,   5,
			18,  32,  16,   0,   1,   0,
			0,   0,  10,   0,  16,   0,
			2,   0,   0,   0,  54,   0,
			0,   5,  34,  32,  16,   0,
			1,   0,   0,   0,  58,   0,
			16,   0,   2,   0,   0,   0,
			54,   0,   0,   6, 242,  32,
			16,   0,   2,   0,   0,   0,
			70,  30,  32,   0,   0,   0,
			0,   0,   2,   0,   0,   0,
			19,   0,   0,   1,  17,   0,
			0,   8,  34,   0,  16,   0,
			0,   0,   0,   0, 198,  10,
			16,   0,   0,   0,   0,   0,
			70, 142,  32,   0,   0,   0,
			0,   0,   1,   0,   0,   0,
			54,   0,   0,   5,  18,  32,
			16,   0,   0,   0,   0,   0,
			26,   0,  16,   0,   0,   0,
			0,   0,  17,   0,   0,   8,
			34,   0,  16,   0,   0,   0,
			0,   0, 198,  10,  16,   0,
			0,   0,   0,   0,  70, 142,
			32,   0,   0,   0,   0,   0,
			2,   0,   0,   0,  17,   0,
			0,   8,  18,   0,  16,   0,
			0,   0,   0,   0, 198,  10,
			16,   0,   0,   0,   0,   0,
			70, 142,  32,   0,   0,   0,
			0,   0,   4,   0,   0,   0,
			54,   0,   0,   5,  34,  32,
			16,   0,   0,   0,   0,   0,
			26,   0,  16,   0,   0,   0,
			0,   0,  54,   0,   0,   5,
			66,  32,  16,   0,   0,   0,
			0,   0,   1,  64,   0,   0,
			0,   0, 128,  63,  54,   0,
			0,   5, 130,  32,  16,   0,
			0,   0,   0,   0,  10,   0,
			16,   0,   0,   0,   0,   0,
			54,   0,   0,   5,  50,  32,
			16,   0,   1,   0,   0,   0,
			230,  10,  16,   0,   2,   0,
			0,   0,  54,   0,   0,   6,
			242,  32,  16,   0,   2,   0,
			0,   0,  70,  30,  32,   0,
			0,   0,   0,   0,   2,   0,
			0,   0,  19,   0,   0,   1,
			9,   0,   0,   1,  62,   0,
			0,   1
		};

		// -----------------------------------------------------
		// pixel shader
		// -----------------------------------------------------
		const BYTE DebugText_PS_Main[] =
		{
			68,  88,  66,  67, 133, 123,
			244, 109,  36, 101, 150, 228,
			91, 135, 209, 221,  54, 143,
			33,  28,   1,   0,   0,   0,
			112,   1,   0,   0,   3,   0,
			0,   0,  44,   0,   0,   0,
			160,   0,   0,   0, 212,   0,
			0,   0,  73,  83,  71,  78,
			108,   0,   0,   0,   3,   0,
			0,   0,   8,   0,   0,   0,
			80,   0,   0,   0,   0,   0,
			0,   0,   1,   0,   0,   0,
			3,   0,   0,   0,   0,   0,
			0,   0,  15,   0,   0,   0,
			92,   0,   0,   0,   0,   0,
			0,   0,   0,   0,   0,   0,
			3,   0,   0,   0,   1,   0,
			0,   0,   3,   3,   0,   0,
			101,   0,   0,   0,   0,   0,
			0,   0,   0,   0,   0,   0,
			3,   0,   0,   0,   2,   0,
			0,   0,  15,  15,   0,   0,
			83,  86,  95,  80,  79,  83,
			73,  84,  73,  79,  78,   0,
			84,  69,  88,  67,  79,  79,
			82,  68,   0,  67,  79,  76,
			79,  82,   0, 171,  79,  83,
			71,  78,  44,   0,   0,   0,
			1,   0,   0,   0,   8,   0,
			0,   0,  32,   0,   0,   0,
			0,   0,   0,   0,   0,   0,
			0,   0,   3,   0,   0,   0,
			0,   0,   0,   0,  15,   0,
			0,   0,  83,  86,  95,  84,
			65,  82,  71,  69,  84,   0,
			171, 171,  83,  72,  68,  82,
			148,   0,   0,   0,  64,   0,
			0,   0,  37,   0,   0,   0,
			90,   0,   0,   3,   0,  96,
			16,   0,   0,   0,   0,   0,
			88,  24,   0,   4,   0, 112,
			16,   0,   0,   0,   0,   0,
			85,  85,   0,   0,  98,  16,
			0,   3,  50,  16,  16,   0,
			1,   0,   0,   0,  98,  16,
			0,   3, 242,  16,  16,   0,
			2,   0,   0,   0, 101,   0,
			0,   3, 242,  32,  16,   0,
			0,   0,   0,   0, 104,   0,
			0,   2,   1,   0,   0,   0,
			69,   0,   0,   9, 242,   0,
			16,   0,   0,   0,   0,   0,
			70,  16,  16,   0,   1,   0,
			0,   0,  70, 126,  16,   0,
			0,   0,   0,   0,   0,  96,
			16,   0,   0,   0,   0,   0,
			56,   0,   0,   7, 242,  32,
			16,   0,   0,   0,   0,   0,
			70,  14,  16,   0,   0,   0,
			0,   0,  70,  30,  16,   0,
			2,   0,   0,   0,  62,   0,
			0,   1
		};

		// -----------------------------------------------------
		// vertex shader
		// -----------------------------------------------------
		const BYTE DebugText_VS_Main[] =
		{
			68,  88,  66,  67, 190,  97,
			0,  55,  77, 152, 190,  30,
			20, 134, 117, 232, 251, 207,
			230, 229,   1,   0,   0,   0,
			176,   1,   0,   0,   3,   0,
			0,   0,  44,   0,   0,   0,
			148,   0,   0,   0,   0,   1,
			0,   0,  73,  83,  71,  78,
			96,   0,   0,   0,   3,   0,
			0,   0,   8,   0,   0,   0,
			80,   0,   0,   0,   0,   0,
			0,   0,   0,   0,   0,   0,
			3,   0,   0,   0,   0,   0,
			0,   0,   7,   7,   0,   0,
			89,   0,   0,   0,   0,   0,
			0,   0,   0,   0,   0,   0,
			3,   0,   0,   0,   1,   0,
			0,   0,  15,  15,   0,   0,
			89,   0,   0,   0,   1,   0,
			0,   0,   0,   0,   0,   0,
			3,   0,   0,   0,   2,   0,
			0,   0,  15,  15,   0,   0,
			80,  79,  83,  73,  84,  73,
			79,  78,   0,  67,  79,  76,
			79,  82,   0, 171,  79,  83,
			71,  78, 100,   0,   0,   0,
			3,   0,   0,   0,   8,   0,
			0,   0,  80,   0,   0,   0,
			0,   0,   0,   0,   1,   0,
			0,   0,   3,   0,   0,   0,
			0,   0,   0,   0,  15,   0,
			0,   0,  92,   0,   0,   0,
			0,   0,   0,   0,   0,   0,
			0,   0,   3,   0,   0,   0,
			1,   0,   0,   0,  15,   0,
			0,   0,  92,   0,   0,   0,
			1,   0,   0,   0,   0,   0,
			0,   0,   3,   0,   0,   0,
			2,   0,   0,   0,  15,   0,
			0,   0,  83,  86,  95,  80,
			79,  83,  73,  84,  73,  79,
			78,   0,  67,  79,  76,  79,
			82,   0, 171, 171,  83,  72,
			68,  82, 168,   0,   0,   0,
			64,   0,   1,   0,  42,   0,
			0,   0,  95,   0,   0,   3,
			114,  16,  16,   0,   0,   0,
			0,   0,  95,   0,   0,   3,
			242,  16,  16,   0,   1,   0,
			0,   0,  95,   0,   0,   3,
			242,  16,  16,   0,   2,   0,
			0,   0, 103,   0,   0,   4,
			242,  32,  16,   0,   0,   0,
			0,   0,   1,   0,   0,   0,
			101,   0,   0,   3, 242,  32,
			16,   0,   1,   0,   0,   0,
			101,   0,   0,   3, 242,  32,
			16,   0,   2,   0,   0,   0,
			54,   0,   0,   5, 114,  32,
			16,   0,   0,   0,   0,   0,
			70,  18,  16,   0,   0,   0,
			0,   0,  54,   0,   0,   5,
			130,  32,  16,   0,   0,   0,
			0,   0,   1,  64,   0,   0,
			0,   0, 128,  63,  54,   0,
			0,   5, 242,  32,  16,   0,
			1,   0,   0,   0,  70,  30,
			16,   0,   1,   0,   0,   0,
			54,   0,   0,   5, 242,  32,
			16,   0,   2,   0,   0,   0,
			70,  30,  16,   0,   2,   0,
			0,   0,  62,   0,   0,   1
		};

		// -----------------------------------------------------
		// debug text vertex
		// -----------------------------------------------------
		struct DebugTextVertex {

			ds::vec3 position;
			ds::vec4 texture;
			ds::Color color;

		};

		// -----------------------------------------------------
		// debug text constant buffer
		// -----------------------------------------------------
		struct DebugTextConstantBuffer {
			ds::vec4 screenDimension;
			ds::matrix wvp;
		};

		const int MAX_DBG_TXT_VERTICES = 2048;

		// -----------------------------------------------------
		// internal debug context
		// -----------------------------------------------------
		struct DebugTextContext {
			RID textureID;
			DebugTextConstantBuffer constantBuffer;
			RID drawItem;
			RID orthoPass;
			DebugTextVertex vertices[MAX_DBG_TXT_VERTICES];
			RID vertexBufferID;
			int current;
		};

		static DebugTextContext* _dbgCtx = 0;

		// -----------------------------------------------------
		// init
		// -----------------------------------------------------
		void init() {
			_dbgCtx = new DebugTextContext;
			_dbgCtx->current = 0;
			//
			// build texture data
			//
			uint8_t* data = new uint8_t[128 * 128 * 4];
			int index = 0;
			for (int y = 0; y < 128; ++y) {
				for (int x = 0; x < 16; ++x) {
					uint8_t t = font[y][x];
					for (int z = 0; z < 8; ++z) {
						if ((t >> z) & 1) {
							data[index++] = 255;
							data[index++] = 255;
							data[index++] = 255;
							data[index++] = 255;
						}
						else {
							data[index++] = 0;
							data[index++] = 0;
							data[index++] = 0;
							data[index++] = 0;
						}
					}
				}
			}			
			//
			// create resources
			//
			_dbgCtx->textureID = createTexture(128, 128, 4, data, ds::TextureFormat::R8G8B8A8_UNORM);
			delete[] data; // we do not need this anymore
			RID vertexShader = ds::createVertexShader(DebugText_VS_Main, sizeof(DebugText_VS_Main));
			RID pixelShader = ds::createPixelShader(DebugText_PS_Main, sizeof(DebugText_PS_Main));
			RID geoShader = ds::createGeometryShader(DebugText_GS_Main, sizeof(DebugText_GS_Main));
			ds::VertexDeclaration decl[] = {
				{ ds::BufferAttribute::POSITION,ds::BufferAttributeType::FLOAT,3 },
				{ ds::BufferAttribute::COLOR,ds::BufferAttributeType::FLOAT,4 },
				{ ds::BufferAttribute::COLOR,ds::BufferAttributeType::FLOAT,4 }
			};
			RID vertexDeclId = ds::createVertexDeclaration(decl, 3, vertexShader);
			RID cbid = ds::createConstantBuffer(sizeof(DebugTextConstantBuffer), &_dbgCtx->constantBuffer);
			_dbgCtx->vertexBufferID = ds::createVertexBuffer(ds::BufferType::DYNAMIC, MAX_DBG_TXT_VERTICES, sizeof(DebugTextVertex));
			RID ssid = ds::createSamplerState(ds::TextureAddressModes::CLAMP, ds::TextureFilters::POINT);

			//
			// create state group
			//
			RID spriteStateGroup = ds::StateGroupBuilder()
				.inputLayout(vertexDeclId)
				.vertexBuffer(_dbgCtx->vertexBufferID)
				.indexBuffer(NO_RID)
				.vertexShader(vertexShader)
				.geometryShader(geoShader)
				.pixelShader(pixelShader)
				.constantBuffer(cbid, geoShader, 0)
				.texture(_dbgCtx->textureID, pixelShader, 0)
				.samplerState(ssid, pixelShader)
				.build();

			ds::vec2 textureSize = ds::getTextureSize(_dbgCtx->textureID);
			_dbgCtx->constantBuffer.screenDimension = ds::vec4(ds::getScreenWidth(), ds::getScreenHeight(), textureSize.x, textureSize.y);
			//
			// create draw command
			//
			ds::DrawCommand drawCmd = { 100, ds::DrawType::DT_VERTICES, ds::PrimitiveTypes::POINT_LIST, 0 };
			_dbgCtx->drawItem = ds::compile(drawCmd, spriteStateGroup);
			//
			// build ortho view and render pass
			//
			ds::matrix orthoView = ds::matIdentity();
			ds::matrix orthoProjection = ds::matOrthoLH(ds::getScreenWidth(), ds::getScreenHeight(), 0.1f, 1.0f);
			_dbgCtx->orthoPass = ds::createRenderPass(orthoView, orthoProjection, ds::DepthBufferState::DISABLED);
			_dbgCtx->constantBuffer.wvp = ds::matTranspose(orthoView * orthoProjection);
		}

		// -----------------------------------------------------
		// begin
		// -----------------------------------------------------
		void begin() {
			_dbgCtx->current = 0;
		}

		// -----------------------------------------------------
		// internal add
		// -----------------------------------------------------
		static void add(int x, int y, const ds::vec4& texture, const ds::Color color) {
			if ((_dbgCtx->current + 1) >= MAX_DBG_TXT_VERTICES) {
				flush();
			}
			_dbgCtx->vertices[_dbgCtx->current++] = { ds::vec3(x,y,0),texture,color };
		}

		// -----------------------------------------------------
		// add
		// -----------------------------------------------------
		void add(int xp, int yp, const char* message) {
			xp *= 10;
			xp += 10;
			yp = ds::getScreenHeight() - 20 - yp * 20;
			int l = strlen(message);
			for (int i = 0; i < l; ++i) {
				int c = message[i] - 32;
				int t = c / 12;
				int y = t * 16;
				int x = (c - t * 12) * 10;
				add(xp + 10 * i, yp, ds::vec4(x, y, 8, 16), ds::Color(255, 255, 255, 255));
			}
		}

		// -----------------------------------------------------
		// format
		// -----------------------------------------------------
		void format(int x, int y, char* format, ...) {
			va_list args;
			va_start(args, format);
			char buffer[1024];
			memset(buffer, 0, sizeof(buffer));
			int written = vsnprintf_s(buffer, sizeof(buffer), _TRUNCATE, format, args);
			add(x, y, buffer);
			va_end(args);
		}

		// -----------------------------------------------------
		// flush
		// -----------------------------------------------------
		void flush() {
			if (_dbgCtx->current > 0) {
				ds::mapBufferData(_dbgCtx->vertexBufferID, _dbgCtx->vertices, _dbgCtx->current * sizeof(DebugTextVertex));
				ds::submit(_dbgCtx->orthoPass, _dbgCtx->drawItem, _dbgCtx->current);
				_dbgCtx->current = 0;
			}
		}

		// -----------------------------------------------------
		// shutdown
		// -----------------------------------------------------
		void shutdown() {
			if (_dbgCtx != 0) {
				delete _dbgCtx;
			}
		}
	}
}
#endif
